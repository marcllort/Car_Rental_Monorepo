# Continuous Integration
name: CI

# Only will run when there is a commit or a pull request in the master branch (to be changed)
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Installs NPM
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
          collectionID: 10954437-8cb0d465-dff6-4319-a607-caad24998335
          environmentID: 98798-a974f882-8ecg0-4c80-9901-a583778393987a

        # Go environment check out (not needed for now till tests run)
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.1

        # Build of Business-Handler binary
      - name: Building Business-Handler binary
        run: |
          cd BusinessHandler
          go build -o canITravelToBusinessHandler

        # Build of Data-Retriever binary
      - name: Building Data-Retriever binary
        run: |
          cd DataRetriever
          go build -o canITravelToDataRetriever
        # Decrypts credentials needed to build the docker image
      - name: Decrypt Creds
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output BusinessHandler/Creds/creds.json BusinessHandler/Creds/creds.json.gpg
          chmod 600 BusinessHandler/Creds/creds.json
          gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output DataRetriever/Creds/creds.json DataRetriever/Creds/creds.json.gpg
          chmod 600 DataRetriever/Creds/creds.json
          gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output BusinessHandler/Creds/https-server.crt BusinessHandler/Creds/https-server.crt.gpg
          chmod 600 BusinessHandler/Creds/https-server.crt
          gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output BusinessHandler/Creds/https-server.key BusinessHandler/Creds/https-server.key.gpg
          chmod 600 BusinessHandler/Creds/https-server.key
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

        # Test of Business-Handler
      - name: Unit testing Business-Handler
        run: |
          cd BusinessHandler/Tests/Controller
          go test -password=$DB_PASSWORD
          cd ../Utils
          go test
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

        # Test of Data-Retriever
      - name: Unit testing Data-Retriever
        run: |
          cd DataRetriever/Tests
          go test -password=$DB_PASSWORD
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

        # Postman Test of Business-Handler
      - name: Integration/E2E testing Business-Handler
        run: |
          cd BusinessHandler
          sudo go run main.go Creds $DB_PASSWORD &
          cd ..
          npm install -g newman 2>&1
          newman run Documentation/Postman/CanITravelToLocal.postman_collection.json --insecure --reporters cli
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}